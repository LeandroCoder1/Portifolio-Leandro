<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Portfólio — Leandro Sousa</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
</head>

<body>
    <!-- Canvas do fundo animado -->
    <canvas id="animated-bg"></canvas>

    <main class="container my-5" id="mainContent">
        @RenderBody()
    </main>

    <div class="box">
        <h3 class="name">Leandro Sousa</h3>
        <hr class="line">
    </div>

    <div class="nav-btns" role="group">
        <button onclick="showSection('home')" class="btn">Ínicio</button>
        <button onclick="showSection('about')" class="btn ">Sobre mim</button>
        <button onclick="showSection('projects')" class="btn ">Projetos</button>
        <button onclick="showSection('contact')" class="btn">Contatos</button>
    </div>

    <main>
        <section id="home" class="tab-section active">
            <div class="temporary">
                <h2>Olá, eu sou Leandro!</h2>
                <b>It is a long established fact that a reader will be distracted by the readable content of a pageaaaa.a aaaaaaaaaaaa..</b>
            </div>
            <picture>
                <source srcset="~/img/profile1.png" type="image/svg+xml">
                <img src="~/img/profile1.png" class="img-fluid img-thumbnail">
            </picture>
            <button onclick="window.location.href='https://github.com/LeandroCoder1';" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-github" viewBox="0 0 16 16">
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27s1.36.09 2 .27c1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.01 8.01 0 0 0 16 8c0-4.42-3.58-8-8-8" />
                </svg>
                Github
            </button>
        </section>

        <section id="about" class="tab-section">Sobre mim...</section>
        <section id="projects" class="tab-section">Projetos...</section>
        <section id="contact" class="tab-section">Contato...</section>

        <footer id="pageFooter" class="footer" style="color: gray; font-size: 12px">
            <div>© @DateTime.Now.Year — Leandro Sousa</div>
        </footer>
    </main>

    <!-- Scripts -->
 <script>
    // Alternar seções
    function showSection(id) {
        document.querySelectorAll(".tab-section").forEach(s => s.classList.remove("active"));
        document.getElementById(id).classList.add("active");
    }

    // Fundo animado
    const canvas = document.getElementById("animated-bg");
    const ctx = canvas.getContext("2d");
    let particles = [];
    const mouse = { x: null, y: null, radius: 120 };

    // Captura posição do mouse
    window.addEventListener("mousemove", (e) => {
        mouse.x = e.clientX;
        mouse.y = e.clientY;
    });

    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    window.addEventListener("resize", resizeCanvas);
    resizeCanvas();

    // Criar partículas
    for (let i = 0; i < 120; i++) {
        particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            r: Math.random() * 3 + 1,
            dx: (Math.random() - 0.5) * 1.2,
            dy: (Math.random() - 0.5) * 1.2,
            baseX: 0,
            baseY: 0
        });
    }

    particles.forEach(p => {
        p.baseX = p.x;
        p.baseY = p.y;
    });

    function drawParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "white";

        particles.forEach(p => {
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
            ctx.fill();

            // Movimento padrão
            p.x += p.dx;
            p.y += p.dy;

            // Rebote nas bordas
            if (p.x < 0 || p.x > canvas.width) p.dx *= -1;
            if (p.y < 0 || p.y > canvas.height) p.dy *= -1;

            // --- Física do mouse ---
            let dx = mouse.x - p.x;
            let dy = mouse.y - p.y;
            let dist = Math.sqrt(dx * dx + dy * dy);

            if (dist < mouse.radius) {
                // Repulsão
                let forceDirX = dx / dist;
                let forceDirY = dy / dist;
                let maxDist = mouse.radius;
                let force = (maxDist - dist) / maxDist; // força proporcional
                let pushX = forceDirX * force * 5; // ajuste intensidade
                let pushY = forceDirY * force * 5;

                p.x -= pushX;
                p.y -= pushY;
            }
        });

        requestAnimationFrame(drawParticles);
    }

    drawParticles();
</script>


    <script src="~/js/site.js"></script>
</body>
</html>
